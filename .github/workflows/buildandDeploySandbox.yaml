name: Send Email Notification

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Project description'
        required: true
      environment:
        description: 'Environment (dev/qa/demo/uat/prod)'
        choice:
        type: choice
        options:
            - dev
            - qa
            - demo
            - uat
            - prod
        required: true 
      version:
        description: 'Artifactory Release version'
        required: true
      tag:
        description: 'Github Tag'
        required: true
      task:
        description: 'Defects/Stories released'
        required: true  
      db:
        description: 'Updated DB script'
        choice:
        type: choice
        options: ["Yes", "No"]
        default: "No"
        required: true 
      app_name:
        description: "Name of the application to delete"
        required: true
        type: string  
        default: "vehs-locations-sync-impl-qa"
jobs:
  send_email:
    runs-on: ubuntu-latest
    environment: DEV
    env:
      ENV: testENV   
      COURIER_AUTH_TOKEN: "pk_test_VR9ADX72AYMN7DQMBBR30P4QBJEX"
      COURIER_TEMPLATE_ID: "PTNT0D2WHE4MGFKBNTVPTRSBG3R7"      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Get artifact Id from pom.xml
        run: echo "MAVEN_ARTIFACTID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV 
      - name: Authenticate with Anypoint Platform
        id: auth
        run: |
          # Authenticate and retrieve an access token
          TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
            -H "Content-Type: application/json" \
            -d '{
              "client_id": "4b825b453e1246ef97d296eec7ecdb9d",
              "client_secret": "13DcB59E3EE84daaB88C0CD8132D7730",
              "grant_type": "client_credentials"
            }' | jq -r '.access_token')

          if [ -z "$TOKEN" ]; then
            echo "Error: Unable to authenticate with Anypoint Platform."
            exit 1
          fi

          # echo "::set-output name=access_token::$TOKEN"
          # Set it as a GitHub Actions output
          echo "access_token=$TOKEN" >> $GITHUB_OUTPUT
      - name: Get List of CloudHub applications
        id: getapps       
        run: |
          getAppsResponse=$(curl --location --request GET 'https://anypoint.mulesoft.com/amc/application-manager/api/v2/organizations/${{ secrets.ORG_ID }}/environments/${{ secrets.ENV_ID }}/deployments' \
            --header 'X-ANYPNT-ENV-ID: ${{ secrets.ENV_ID }}' \
            --header 'X-ANYPNT-ORG-ID: ${{ secrets.ORG_ID }}' \
            --header 'Content-Type: application/json;charset=UTF-8' \
            --header 'Authorization: Bearer ${{ steps.parse_json.outputs.access_token }}')
            
          echo "::set-output name=getAppsResponse::$getAppsResponse"
      - name: Output application names
        id: getAppId
        run: | 
          # Extract application names from the response
          APPLICATION_ID=$(jq -r '.items[] | select(.name == "vehs-locations-sync-impl-qa") | .id' response.json)  
          #APPLICATION_ID=$(jq -r '.items[] | select(.name == "vehs-locations-sync-impl-qa-notexists") | .id' response.json)  
          # Set it as a GitHub Actions output
          echo "applicationId=$APPLICATION_ID" >> $GITHUB_OUTPUT    
          if [ "$APPLICATION_ID" != '' ]; then
            echo "Application is deployed."
            echo "APP_DEPLOYED=true" >> $GITHUB_ENV
          else
            echo "Application is not deployed."
            echo "APP_DEPLOYED=false" >> $GITHUB_ENV
          fi
      - name: Patch the application if it exists
        id: AppExists
        if: env.APP_DEPLOYED == 'true'
        run: |
          echo "ApplicationId Exists: ${{ steps.getAppId.outputs.applicationId }}"
      - name: Deploy the application if it does not exist
        id: AppNotExists
        if: env.APP_DEPLOYED == 'false'
        run: |
          echo "ApplicationId Not Exists"      
      - name: Echo Environment Variables
        run: |
           echo "EMAIL_TO: ${{ vars.EMAIL_TO }}"
           echo "service: ${{ inputs.service }}"
           echo "env: ${{ inputs.environment }}"
           echo "release: ${{ inputs.version }}"
           echo "tag: ${{ inputs.tag }}"
           echo "task: ${{ inputs.task }}"
           echo "db: ${{ inputs.db }}"
           echo "MAVEN_ARTIFACTID: ${{ env.MAVEN_ARTIFACTID }}"
           echo "app_name: ${{ inputs.app_name }}"
           echo "ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}"
           echo "APPLICATION_ID: ${{ steps.getAppId.outputs.applicationId }}"
           echo "COURIER_AUTH_TOKEN: $COURIER_AUTH_TOKEN "
           echo "COURIER_TEMPLATE_ID: $COURIER_TEMPLATE_ID "
      - name: Send Email using Courier
        id: send-email
        run: |
          # Replace "YOUR_COURIER_TEMPLATE_ID" with your actual template ID
          responseemail=$(curl -s -o responseemail.json -w "%{http_code}" \
            -X POST "https://api.courier.com/send" \
            -H "Authorization: Bearer $COURIER_AUTH_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "message": {
                "to": {
                  "email": "${{ vars.EMAIL_TO }}"
                },
                "template": "'$COURIER_TEMPLATE_ID'",
                "data": {
                  "service": "${{ inputs.service }}",
                  "env": "${{ inputs.environment }}",
                  "release": "${{ inputs.version }}",
                  "tag": "${{ inputs.tag }}",
                  "task": "${{ inputs.task }}",
                  "db": "${{ inputs.db }}"
                }
              }
            }')

          # Extract HTTP status code
          status_code=$(echo "$responseemail")
          echo "Courier API response code: $status_code"

          # Inspect response for errors
          if [ "$status_code" -ge 400 ]; then
            echo "Error: Email sending failed. Response:"
            cat responseemail.json
            exit 1
          else
            echo "Email sent successfully!"
          fi
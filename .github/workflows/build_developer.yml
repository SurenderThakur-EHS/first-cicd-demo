# This workflow will build a MuleSoft project and deploy to CloudHub

name: Build and Deploy to Dev

on:
  push:
    branches: [ developer ]
  workflow_dispatch:
    
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      LOGZIO_TOKEN: ${{ secrets.LOGZIO_TOKEN }}
    
    steps:
    
    - uses: actions/checkout@v3  
       
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    
    - name: Print effective-settings (optional)
      run: mvn help:effective-settings
    
    - name: Build with Maven
      run: mvn -B package -s .maven/settings.xml
    
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar 
         
          
  upload:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      LOGZIO_TOKEN: ${{ secrets.LOGZIO_TOKEN }}
      JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
      JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
      ENV: Dev
      MULE_ENV: dev

    steps:    
    
    - uses: actions/checkout@v3
    
    - name: Get version from pom.xml
      run: echo "MAVEN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      
    - name: Get artifact Id from pom.xml
      run: echo "MAVEN_ARTIFACTID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV
    
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    
    - name: Upload to Exchange
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy \
         -s .maven/settings.xml \
         -Dmule.artifact=$artifactName \
         
    - name: Upload to Jfrog
      run: |
        curl -u ${{ env.JFROG_USERNAME }}:${{ env.JFROG_PASSWORD }} \
         -T target/*jar \
         "https://velocityehs.jfrog.io/artifactory/libs-snapshot/5c464bd3-4eb8-4174-9866-479f2d66c66d/${{ env.MAVEN_ARTIFACTID }}/${{ env.MAVEN_VERSION }}-SNAPSHOT/${{ env.MAVEN_ARTIFACTID }}-${{ env.MAVEN_VERSION }}.jar"
    
  deploy:
    needs: upload
    runs-on: ubuntu-latest
    environment: dev
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      LOGZIO_TOKEN: ${{ secrets.LOGZIO_TOKEN }}
      VEHS_GITHUB_TOKEN: ${{ secrets.VEHS_GITHUB_TOKEN }}
      ENV: Dev
      MULE_ENV: dev

    steps:    
    
    - uses: actions/checkout@v3
    
    - name: Get version from pom.xml
      run: echo "MAVEN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      
    - name: Get artifact Id from pom.xml
      run: echo "MAVEN_ARTIFACTID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV
    
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    
    - name: Deploy to Dev
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
         -Dmule.artifact=$artifactName \
         -Dapplication.name="first-cicd-demo-dev" \
         -s .maven/settings.xml \
         -DskipTests \
         -DskipDeploymentVerification="true"
         
    - name: Tag the release
      run: |
        curl -X POST \
             -H "Authorization: token ${{ env.VEHS_GITHUB_TOKEN }}" \
             -d '{"ref": "refs/tags/Release_${{ env.MAVEN_VERSION }}", "sha": "${{ github.sha }}"}' \
             https://api.github.com/repos/VelocityEHS/${{ env.MAVEN_ARTIFACTID }}/git/refs 
             
  send_email:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    
     - name: Wait for 180 seconds
       run: |
        sleep 180  
        
     - name: Save details to environment
       run: |
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=${{ github.event.head_commit.message }}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=${{ github.event.head_commit.author.name }}" >> $GITHUB_ENV
          
     - name: Send Email Notification
       run: |
            curl --location 'https://api.courier.com/send' \
            --header 'Authorization: Bearer ${{ secrets.COURIER_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "message": {
                    "to": {
                        "email": "${{ secrets.EMAIL_TO }}"
                    },
                    "template": "${{ secrets.COURIER_TEMPLATE_ID }}",
                    "data": {
                        "service": "${{ env.MAVEN_ARTIFACTID }}",
                        "env": "dev",
                        "release": "Release_${{ env.MAVEN_VERSION }}",
                        "tag": "${{ env.MAVEN_VERSION }}",
                        "task": "${{ env.BRANCH_NAME }}-${{ env.COMMIT_MESSAGE }}-${{ env.COMMIT_AUTHOR }}",
                        "db": "${{ github.event.inputs.db }}"
                    }
                }
            }'      